\sec	Syntax von Makefiles

Eine Beschreibungsdatei besteht aus Kommentaren, Variablenzuweisungen
und Regeln.

\ssec	Fortsetzungszeilen
Ein Gegenschrägstrich vor einem Zeilenvorschub hebt diesen auf,
die nachfolgende Zeile gilt dann als Fortsetzung der vorangegangenen
Zeile. Damit können lange Zeilen umgebrochen werden.

<*Achtung:*> Zwischen dem Gegenschrägstrich und dem Zeilenvorschub
darf kein Leerzeichen oder Tabulator (unsichtbar im Editor!) stehen.

\ssec	Kommentare
Eine Kommentarzeile beginnt mit einem Gittersymbol und endet
beim nächsten Zeilenvorschub.

\ssec	Regeln
Eine Regel besteht aus einer nicht leeren, durch Leerzeichen
getrennte Liste von Zielen, die mit einem einfachen <"|:|"> oder
zweifachen <"|::|"> Doppelpunkt abgeschlossen wird.
Danach folgt optional in der gleichen Zeile eine Liste
von Abhängigkeiten, die wahlweise mit einem Strichpunkt
oder einem Zeilenvorschub abgeschlossen wird.
Den Abschluss der Regel bilden die einzelnen Befehlszeilen,
die entweder durch einen Strichpunkt <"|;|"> oder durch die
Kombination <"Zeilenvorschub Tabulator"> getrennt werden.
Sowohl Abhängigkeiten, als auch Befehlszeilen sind optional.

Die erste, nicht leere Zeile, die nicht mit einem Tabulator oder einer
Kommentarkennung beginnt, beendet eine Regel.
Shell Befehlszeilen können mit einem Gegenschrägstrich über mehrere
Zeilen fortgesetzt werden. Die Befehlszeilen werden unverändert der
Shell übergeben. Lediglich der Tabulator und spezielle, weiter unten
angeführte Schalter zu Beginn einer Befehlszeile
werden entfernt.

<*Achtung:*> Tabulatoren können nicht durch Leerzeichen ersetzt
werden!

Die einzelnen Befehlszeilen werden einzeln in der angegebenen
Reihenfolge von der Unix-Shell ausgewertet. Im Regelfall
wird jeder von |make| ausgeführte Befehl ausgegeben. Falls
der Rückgabewert der Befehls verschieden von 0 ist, erfolgt ein
Abbruch der Verarbeitung und die aktuellen Ziele werden, falls sie
bereits existieren, gelöscht. Dieses Verhalten kann mit speziellen
Schaltern zu Beginn der Befehlszeile verändert werden

Folgende Schalter können zu Beginn der Befehlszeile in beliebiger
Kombination stehen:
[|-|]
	Der Fehlerkode des Kommandos wird ignoriert.
[|@|]
	Die Befehlszeile wird bei der Ausführung nicht dargestellt.
[|+|]
	Die Befehlszeile wird ausgeführt, auch wenn |make| mit der
	Optionen |-n| aufgerufen wurde.

\ssec	Pseudoziele
Im Regelfall handelt es sich bei den Zielen um Dateien, die
bei der Ausführung der angegebenen Befehle generiert werden.
Führt das Ausführen der Befehlszeilen niemals zum Entstehen einer
Datei mit dem Namen des Ziels, wird von einem Pseudoziel gesprochen.
Pseudoziele werden für Aktivitäten wie <"alles generieren"> oder
<"aufräumen"> verwendet. Da nie eine entsprechende Datei generiert
wird, sind Pseudoziele nie am letzten Stand und die entsprechenden
Befehlszeilen, sofern welche existieren, werden immer ausgeführt.

\ssec	Einfachregeln
Einfachregeln sind durch einen einfachen Doppelpunkt als Abschluss
der Liste von Zielen gekennzeichnet. Ein Ziel darf bei mehreren
Regeln Verwendung finden, aber nur eine einzige Regel darf
Befehlszeilen enthalten. Die Abhängigkeitslisten aller Regeln werden
zusammengefasst.
Gibt es keine Abhängigkeiten, werden die Befehlszeilen nur ausgeführt,
wenn die Zieldateien nicht existieren.

\ssec	Mehrfachregeln
Mehrfachregeln sind durch einen doppelten Doppelpunkt als Abschluss
der Liste von Zielen gekennzeichnet. Gegenüber von Einfachregeln
dürfen alle Regeln zu einem Ziel Befehlszeilen enthalten.
Es werden nur jene ausgeführt,
deren Abhängigkeitslisten es erforderlich machen.
Eine fehlende
Abhängigkeitsliste führt im Unterschied zu einer Einfachregel
immer zur Ausführung der zugehörigen Befehlszeilen.

Ein einzelnes Ziel kann nicht mit Einfachregeln und mit
Mehrfachregeln gleichzeitig definiert werden.
Mehrfachregeln werden häufig für Pseudoziele verwendet.

\ssec	Variablen
Eine Variablenzuweisung hat die Form <"<name>~|=|~<String>">.
Leerzeichen und Tabulatoren vor und nach dem Zuweisungszeichen <"|=|">
werden ignoriert.
<String> besteht aus allen Zeichen bis zu einer Kommentarkennung oder
einem nicht durch einen Gegenschrägstrich aufgehobenen Zeilenvorschub.
Der Inhalt einer Variablen wird durch <"|$(|<name>\[|:|<key>|=|<repl>\]|)|">
abgerufen. Der optionale Zusatz <"|:|<key>=<repl>">
legt eine Ersetzungsregel fest. Dabei wird jedes nicht überlappende
Vorkommen von <key> durch <repl> ersetzt.

Eine Variable, die nur aus einem Buchstaben besteht, braucht bei der
Expandierung nicht geklammert zu werden.
Somit ist |$A| gleichwertig mit |$(A)|.
Soll ein Dollarsymbol selbst im Beschreibungsfile vorkommen,
sind zwei Dollarsymbole zu verwenden.

Die Abfrage einer nicht definierten Variable liefert einen Leerstring.
Umgebungsvariablen werden standardmäßig in der
Liste der Variablen aufgenommen (z.B. |$(HOME)|).

\ssec	Interne Variablen
Es gibt die folgenden fünf interne Variablen:
[|$@|]
	liefert den vollständigen Zielnamen für die aktuelle Regel.
	Er sollte in den Befehlszeilen einer Regel immer anstelle des
	Zielnamens eingesetzt werden. Dadurch werden Fehler durch
	falsche Schreibweisen vermieden, da der Zielname nur einmal
	explizit angegeben wird.
[|$?|]
	liefert die Liste jener Vorraussetzungen für eine explizite Regel,
	die nicht am aktuellen Stand sind.
[|$%|]
	liefert den Namen des Bibliothekeintrags |<file>.o|, wenn
	das Ziel einer Regel ein Archiveintrag
	der Form <|<lib>(<file>.o)|> ist.
	In diesem Fall liefert |$@| den Namen der
	Bibliothek <lib> selbst.
[|$*|]
	liefert den Filenamen der aktuellen Abhängigkeit ohne dem Filezusatz.
	Die Variable wird nur bei internen Regeln gesetzt.
[|$<|]
	liefert den vollständigen Filenamen der aktuellen Abhängigkeit.
	Die Variable wird nur bei internen Regeln gesetzt.

Die Variablen |$*| und |$<| werden nur bei impliziten Regeln gesetzt.
Eine implizite Regel beschreibt, wie eine Datei mit einem
bestimmten Filezusatz aus einer Datei gleichen Namens mit anderem
Filezusatz generiert werden kann.

Allen internen Variablen kann der Buchstabe |D| oder |F| nachgestellt
werden (z.B: |$(@D)|).
Sie stehen für <"directory part"> bzw. <"file part"> und liefern
entweder den Verzeichnisnamen oder den Basisnamen der durch die
Variable definierten Datei.

Im Kontext generierter Makefiles ist nur die Variable |$@| von Bedeutung.

