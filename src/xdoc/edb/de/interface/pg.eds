\sec	PostgreSQL

Mit EFEU wird eine Schnittstellenbibliothek zu PostgreSQL mitgeliefert, die
auch die EDB-Schnittstelle um entsprechende Ein- und
Ausgabedefinitionen erweitert. Bei der Kompilierung dieser
Schnittstelle müssen die PostgreSQL-Entwicklungsdateien installiert
sein.

Aktiviert wird die Schnittstelle durch Einbinden der Headerdatei
\index{|pg.hdr|}. Diese enthält im wesentlichen die Befehlszeile:

---- verbatim
loadlib("PG", "SetupPG");
----

Dabei ist |PG| der Name der gemeinsam genutzen Bibliothek und
|SetupPG| ist eine Initialisierungsfunktion für die Aktivierung der
Erweiterung.

Die Headerdatei kann bei den edb-Kommandos entweder über die Option |-F pg.hdr|
geladen werden oder durch |#include <pg.hdr>| im |@head|-Abschnitt eines
EDB-Datenfiles eingebunden werden.

\ssec	Generieren einer PostgreSQL Tabelle

Mithilfe der durch diese Schnittstelle aktivierten Ausgabefunktion \index{|pg|}
kann ein EDB-Datenfile direkt in eine PostgrSQL-Tabelle geschrieben werden.
Zusätzlich wird ein EDB-Metadatenfile erzeugt, mit deren Hilfe die
Daten wieder aus der Tabelle ausgelesen werden können.

Beispiel: Die folgende Befehlszeile generiert eine Tabelle |pers| in
der Datenbank |foo| aus dem EDB-Datenfile |pers.dat|:

---- verbatim
edb -n0 -F pg.hdr -p pg=foo:pers pers.edb
----

Die generierte PostgreSQL Tabelle hat die folgende Struktur:

---- verbatim
       Tabelle »public.pers«
   Spalte    |   Typ   | Attribute
=============+=========+===========
 num         | integer |
 first_name  | text    |
 family_name | text    |
 birth_year  | integer |
 gender      | integer |
----

Die Ausgabefunktion |pg| hat die allgemeine Syntax:

|pg[|<flags>|]=|[<dbdef>|:|]<name>[|;|<par>]

Folgende Steuerflags <flags> können angegeben werden:
[d]	Bereits vorhandene Tabelle diesen Namens löschen;
[n]	Keine Verbindung aufbauen, nur Metadatenfile ausgeben.

Bei der Datenbankdefinition <dbdef> handelt es sich entweder um einen
einzelnen Datenbanknamen, oder eine Liste von Verbindungsparametern
der Form <name>|=|<var> für die Funktion PQconnectdb der
C-Schnittstelle zu PostgreSQL.

Mit dem Parameter <par> können Primärschlüssel, Fremdschlüssel oder
zusätzliche Spalten für die Tabelle definiert werden. Der Parameter
wird ans Ende der Strukturdefinition der Tabelle gestellt.
Die folgende Ausgabevariante definiert |num| als Primärschlüssel für
die Tabelle |pers|. Die Ausgabefunktion muss unter Anführung gestellt
werden, damit der Strichpunkt, das Leerzeichen und die Klammern nicht
von der Shell interpretiert werden.

---- verbatim
edb -n0 -F pg.hdr -p 'pg=foo:pers;primary key(num)' pers.edb
----

Der Datenaustausch erfolgt mit dem SQL-Kommando:
	|COPY| <table> |FROM stdin|
Die Daten werden im Textformat übertragen. Die Datentypen der Tabelle werden
aus den Datentypen des Interpreters bestimmt. Falls keine äquivalenten
Datentypen existieren, wird |text| genommen.

Die Datentypen werden automatisch bestimmt. Es gelten folgende
Umsetzungsregeln:

\tab	|l|l|
---
EFI | Postgres
---
char | integer
bool | integer
int8_t | integer
int16_t | integer
int | integer
int32_t | integer
int64_t | int8
varint | int8
uint8_t | integer
uint16_t | integer
unsigned | int8
uint32_t | int8
uint64_t | int8
varsize | int8
float | float
double | float
str | text
Date | date
---

Aufzählungstypen werden als |integer| umgesetzt.
Strukturen werden in Komponenten aufgelöst. Als Name wird
<foo>|_|<bar> verwendet, wobei <foo> der Strukturname und <bar> der
Komponentenname ist.

Alle anderen Datentypen werden in |text| umgesetzt.

\ssec	Zugriff auf PostgreSQL Tabellen

Bei Konstruktion einer Tabelle mithilfe der |pg|-Ausgabefunktion
wird ein Metafile generiert, das wiederum den Zugriff auf die
Tabellendaten erlaubt. Im hier verwendeten Beispiel hat es folgenden
Aufbau:

\pipe[verbatim]  |edb -n0 -F pg.hdr -p pg[n]=foo:pers pers.edb|

Das Metafile enthält zunächst den Datentyp der Tabelle, danach folgt
eine |head|-Anweisung zur Aktivierung der PostgreSQL-Schnittstelle.
Die eigentliche Datenabfrage erfolgt mithilfe von \index{|pg_copy|}.
Als Argument wird analog zur Ausgabefunktion der Datenbankname und
der Tabellenname angegeben.

Diese Form der Abfrage kann nicht nur für mit |edb| generierten
Tabellen, sondern auch allgemein verwendet werden. Die Datenstruktur
muss den einzelnen Variablen der Tabelle entsprechen.
Der Datenaustausch erfolgt wiederum im Textformat.

Die Datenbankabfrage erfolgt mittels:
	|COPY| <table> |TO stdout|
Dieser Befehl kann nicht für eine Sicht verwendet werden.

\ssec	Allgemeine Datenbankabfragen mit einem Metadatenfile

Eine Datenbankabfrage kann über ein Metadatenfile realisiert werden.
Die Daten lassen sich wie ein gewöhnliches |EDB|-Datenfile
weiterverarbeiten.

Neben der Extraktion von Daten mittels |COPY| können auch beliebige
Datenbankabfragen mithilfe von |pg_query| über ein Metadatenfile realisiert
werden.

Die Allgemeine Syntax der Metadatenfileanweisung ist:

|pg_query| <dbdef>\br
<Select-Anweisung>

Die Abfrage erfolgt Zeilenweise über einen Datenbankcursor. Innerhalb
der Select-Anweisung sind Kommentare im C-Stil zulässig und
Zeilenvorschübe werden wie Leerzeichen behandelt. Ein Abschluss des
Kommandos mit einem Strichpunkt wie in |psql| ist nicht notwendig,
kann aber vorhanden sein.

Der Datentyp für das EDB-Datenfile muss nicht vorgegeben werden, er
kann automatisch aus der Abfrage ermittelt werden. Es gelten folgende
Umsetzungsregeln:

\tab	|l|l|
---
Postgres | EFI
---
int4 | int
int8 | varint
float | double
date | Date
text | str
---

Alle anderen Datentypen werden als Zeichenkette |str| übernommen.

Die einzelnen Datenzeilen werden mithilfe eines temporären Cursors
vom Datenbankserver abgefragt.
Der Datenaustausch erfolgt wiederum im Textformat.

Das folgende Beispiel zeigt die Verwendung von |pg_query|:

---- verbatim
EDB 1.0
@head
#include <pg.hdr>
@pg_query foo
SELECT gender,first_name,family_name,birth_year
FROM pers
ORDER BY gender,birth_year
----

\ssec	SQL-Anweisungen und persistente Verbindungen

Neben den bisher vorgestellten Abfragemöglichkeiten mit |pg_copy| und
|pg_query| können auch allgemeine SQL-Anweisungen gesendet werden.
Dies erfolgt mithilfe der Anweisung |pg_exec|. Die Syntax ist analog
zu |pg_query|, jedoch kann mehr als eine Anweisung gesendet werden.

|pg_exec| <dbdef>\br
<SQL-Anweisungen>

Die Anweisungen |pg_copy|, |pg_query| und |pg_exec| bauen im
Normalfall jeweils eine unabhängige Verbindung auf. Alternativ dazu
kann zunächst eine Verbindung mit |pg_connect| eingerichtet werden.
Anschließend werden die Abfrageanweisungen ohne
Datenbankdefinition verwendet. Der Zugriff auf die Datenbank wird mit
|pg_close| geschlossen.
Jede weitere Anweisung mit SQL-Abfragen baut eine
neue Verbindung auf.

|pg_connect| <dbdef>\n
<Metafileanweisungen>\br
|pg_close|

Die Anweisung |pg_connect| kann geschachtelt werden.
