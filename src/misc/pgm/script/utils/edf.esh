/*
:*:disk usage
:de:Festplattenverwendung

$Copyright (C) 2001 Erich Frühstück
This file is part of EFEU.

EFEU is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

EFEU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with EFEU; see the file COPYING.
If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

pconfig !
Version = ":VN:"
Power = 1000
Unit = GB
All = false
LBL_DEV = Filesystem
LBL_SIZE = :*:size:de:Größe
LBL_USED = :*:used:de:Verbraucht
LBL_AVAIL = :*:available:de:Verfügbar
LBL_MOUNT = :*:mount point:de:Mountpunkt
LBL_GES = :*:total:de:Insgesamt

a | All = true
	:*:display also filesystems without type.
	:de:Auch Dateisysteme ohne Typ ausgeben.
g | Unit = GB
	:*:display size in GB.
	:de:Gößen in GB ausgeben.
m | Unit = MB
	:*:display size in MB.
	:de:Gößen in MB ausgeben.
H | Power = 1024
	:*:use powers of 1024 instead of 1000
	:de:Verwende 1024 anstelle von 1000 als einheit
!

struct DATA {
	str dev;
	str mount;
	double size;
	double used;
	double free;
};

virtual void DATA::operator+= & (DATA b)
{
	size += b.size;
	used += b.used;
	free += b.free;
}

str fmt_hdr = "%-14s %10s %13s %13s %s\n";
str fmt_dat1 = "%-16s %8.1f %8.1f %3.0f%% %8.1f %3.0f%% %s\n";
str fmt_dat2 = "%-16s %8.3f %8.3f %3.0f%% %8.3f %3.0f%% %s\n";

virtual int fprint(IO io, DATA x)
{
	return fprintf(io, fmt_dat, x.dev, scale * x.size,
		scale * x.used, idx(x.used, x.size),
		scale * x.free, idx(x.free, x.size),
		x.mount);
}

str UNAME = filter("uname");

DATA str ()
{
	str x[] = split(this);
	double size = x[1];

#if	UNAME == "Linux" || UNAME == "FreeBSD"
	double free = x[3];
	double used = x[2];
#else
	double free = x[2];
	double used = size - free;
#endif
	return (DATA) { x[0], x[dim(x) - 1], size, used, free };
}

double power = Power;
double scale = 1024. / (power * power);
str fmt_dat = fmt_dat1;

if	(Unit == "GB")
{
	scale /= power;
	fmt_dat =fmt_dat2;
}

printf(fmt_hdr, LBL_DEV, paste(" ", LBL_SIZE, Unit),
	LBL_USED, LBL_AVAIL, LBL_MOUNT);

#if	UNAME == "Linux"
IO io = open("|LANG=C df -P", "r");
#else
IO io = open("|LANG=C df", "r");
#endif

str line;
DATA ges = { LBL_GES, NULL };

while (getline(io, line))
{
	if	(regexec("^File", line))
		continue;

#if !flagres("All")
	if	(regexec("none", line))
		continue;
#endif

	DATA x = line;
	fprint(iostd, x);
	ges += x;
}

fprint(iostd, ges);

