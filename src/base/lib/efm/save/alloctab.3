\secnum[3]
\entry[alloctab]{ALLOCTAB, new_data, del_data, tst_data}
\Name
\caption{Verwaltung~von Speicher\-segmenten~fixer~Größe}
\Synopsis
\tthang
#include <EFEU/memalloc.h>

ALLOCTAB (\it{name}, size_t \it{blksize}, size_t \it{elsize});

void *new_data (alloctab_t *\it{tab});

int del_data (alloctab_t *\it{tab}, void *\it{ptr});

int tst_data (alloctab_t *\it{tab}, void *\it{data});
\end
\Description
Der Makro \tt{ALLOCTAB} initialisiert eine Zuweisungstabelle
zur Verwaltung von Speicherelementen fixer Länge unter dem Namen \it{name}.
Die Länge eines Segmentes wird durch \it{elsize} festgelegt.
Durch \it{blksize} wird die Zahl der Elemente eines Blockes festgelegt.
Falls \it{blksize} den Wert 0 hat, werden Standardvorgaben verwendet.

Eine Zuweisungstabelle hat den folgenden Aufbau:

\source
typedef struct chain_s {
	struct chain_s *next;
} chain_t;

typedef struct {
	size_t blksize;
	size_t elsize;
	size_t nfree;
	size_t nused;
	chain_t *blklist;
	chain_t *freelist;
} alloctab_t;
\end

Die Größe der Datensegmente wird auf die Größe einer Kettenstruktur
ausgerichtet. Freie Elemente werden zu einer Liste verkettet und
können dort entnommen werden.
Der Eintrag \tt{next} verweist jeweils auf das nächste freie Element.
Für das letzte Element der Liste wird er auf NULL gesetzt.

Die \tt{alloctab_t}-Struktur enthält eine Liste der freien Elemente
(\tt{freelist}) und eine Liste mit Datenblöcken (\tt{blklist}).
Die Zahl der freien Segmente wird in \tt{nfree} und die Zahl der
benutzten Segmente wird in \tt{nused} gespeichert.

Die Funktion \tt{new_data} stellt ein neues Datensegment zur
Verfügung.
Ist \tt{nfree} gleich null, wird zunächst die freie Liste aufgefüllt.
Dazu wird der Speicherplatz für einen Block mit \tt{blksize}
Elementen angefordert. Jedem Block ist eine Kettenstruktur
vorangestellt (Für die Liste der Datenblöcke). 
Der Speicherbedarf für einen Block beträgt
\tt{sizeof(chain_t)} + \it{blksize} * \it{elsize}.
Anschließend wird das erste Element aus \tt{freelist} genommen.
Die Funktion liefert die Adresse des Elements.

Die Funktion \tt{del_data} gibt das Datensegment \it{ptr} wieder frei.
Dabei wird überprüft, ob das Datensegment aus der Zuweisungstabelle
stammt, eine gültige Adresse besitzt und nicht bereits in der
Liste der freien Elemente aufscheint. Das Datensegment wird 
in die liste der freien Elemente eingefügt.
Die Funktion liefert 1 bei Erfolg und 0 falls der Pointer nicht
aus der Zuweisungstabelle stammt.

Anstelle von \it{ptr} kann
auch ein Nullpointer übergeben werden, in diesem Fall werden
von der Funktion \tt{del_data} keine Aktionen durchgeführt.
Das Resultat ist 1 für Erfolg.

Die Funktion \tt{tst_data} überprüft einen Pointer, ob er aus der
Zuweisungstabelle stammt und eine gültige Adressse hat.

Die Funktionen \tt{new_data}, \tt{del_data} und \tt{tst_data} erwarten
als erstes
Argument die Adresse einer mit dem Makro \tt{ALLOCTAB} eingerichteten
Zuweisungstabelle.
\Notes
Die Funktionen entlasten die dynamische Speicherplatzverwaltung
und verhindern eine Zerstückelung von Speichersegmenten bei kleinen
Datenobjekten.

Datenblöcke, die zum Füllen der freien Liste angefordert wurden,
werden nicht mehr freigegeben.
\SeeAlso
\tt{memalloc(3)}, \tt{stack(3)}.\break
\tt{malloc(3C)} im \PRM.
\Diagnostics
Falls \tt{del_data} mit einem Datenpointer \it{ptr} verschieden von Null
aufgerufen wurde, der nicht von einem Aufruf von \tt{new_data} mit derselben
Zuweisungstabelle stammt, liefert die Funktion den Wert 0, ansonsten 1.
\Warnings
Nach der Freigabe eines Datensegmentes darf dieses nicht mehr benützt werden,
da ansonsten die freie Liste zerstört wird.
Der Inhalt eines Datensegmentes wird bei der Freigabe verändert.
