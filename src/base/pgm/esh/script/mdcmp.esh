/*
:*:	compare two data cubes
:de:	Zwei Datenmatrizen vergleichen

Copyright (C) 1997, 2001 Erich Frühstück
This file is part of EFEU.

EFEU is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

EFEU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with EFEU; see the file COPYING.
If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

VirFunc Function = operator"!=";
Type_t Type = NULL;

PrintListDelim = "\t";

pconfig !
#if	Lang == "de"
Ident = "Zwei Datenmatrizen vergleichen"
#else
Ident = "compare two data cubes";
#endif
Version = "2"
Copyright = "(c) 1997, 2001 Erich Frühstück"

F:file | :eval 'gload(IncPath, "{}")'
	:*:execute command lines in file <file>
	:de:Datei <file> mit Befehlszeilen laden
E:expr | :eval 'geval("{}")'
	:*:evaluate expression <expr>
	:de:Ausdruck <expr> auswerten

f:func | :eval 'Function="{}"'
	:*:compare function 
	:de:Vergleichsfunktion
e:expr | Expr
	:*:compare expression
	:de:Ausdruck

r | Reduce = true
	:*:remove singulary axis
	:de:Entfernen von singulären Achsen
v:[name::]var | VarDef: append " "
	:*:select type components
	:de:Variablenselektion
T:title | Title
	:*:set title of output file
	:de:Titel der Ausgabedatei setzen
:file1 | Ein1
	:*:name of first data cube
	:de:Name der 1. Eingabedatei
:file2 | Ein2
	:*:name of second data cube
	:de:Name der 2. Eingabedatei
/.*=.*/name=var | SelDef: append " "
	:*:selection parameter
	:de:Selektionsparameter
::aus | Output; PrintMode = false
	:*:output file
	:de:Name der Ausgabedatei
!

mdmat md1 = mdload(Ein1, SelDef, VarDef);
mdmat md2 = mdload(Ein2, SelDef, VarDef);

if	(flagres("Reduce"))
{
	md1.reduce();
	md2.reduce();
}

if	(Expr)
{
	eval(sprintf("virtual %s _EVALFUNC(%s x, %s y) return (%s);",
		bool, md1.type, md2.type, Expr));
	Function = _EVALFUNC;
}

//mdmat md = mdexpr(Function, md1, md2);

//md.mark("#-1").print(iostd, "nohead");

bool LISTCMP(List_t a, List_t b)
{
	int xdim = dim(a);
	
	if	(xdim != dim(b))	return true;

	for (int i = 0; i < xdim; i++)
	{
		if	(Function(a.obj, b.obj))	return true;

		a = a.next;
		b = b.next;
	}

	return false;
}

PrintListBegin = NULL;
PrintListEnd = NULL;

bool subcmp(str mask)
	return LISTCMP(md1.data(mask), md2.data(mask));

void display(str mask)
{
	printf("%s: ", mask);
	iostd << md1.data(mask);
	iostd << " != "
	iostd << md2.data(mask);
	iostd << '\n';
}

void walk(mdaxis x, str mask, int depth)
{
	depth++;
	str idx = sprintf("#%d", depth);

	if	(x)
	{
		for (z in md1.label(idx))
		{
			str submask = paste(" ", mask, paste("=", idx, z));

			if	(subcmp(submask))
				walk(x.next, submask, depth);
		}
	}
	else	display(mask);
}

walk(md1.axis, NULL, 0);

free(md1);
free(md2);
