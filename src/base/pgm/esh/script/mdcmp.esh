Ident = "Zwei Datenmatrizen vergleichen";
Copyright = "(c) 1997 Erich Frühstück, A-1090 Wien, Währinger Straße 64/6";
Version = "2";

bool PrintMode = true;
bool Reduce = false;
str VarDef = NULL;
str Title = NULL;
str Ein1 = NULL;
str Ein2 = NULL;
str Output = NULL;
str SelDef = NULL;
VirFunc Funktion = operator"!=";
str Expr = NULL;
Type_t Type = NULL;

PrintListDelim = "\t";

PgmOpt("F file", "gload(IncPath, #1)", "Datei mit Definitionen laden")
PgmOpt("E expr", "geval(#1)", "Ausdruck auswerten")

PgmOpt("f func", "Funktion=#1", "Vergleichsfunktion")
PgmOpt("e expr", "Expr=#1", "Ausdruck")

PgmOpt("r", "Reduce=true", "Entfernen von singulären Achsen")
PgmOpt("v [name=]var", "VarDef=paste(' ', VarDef, #1)", "Variablenselektion")
PgmOpt("T titel", "Title=#1", "Titel der Ausgabedatei")
PgmArg("m1", "Ein1=#1", "Name der 1. Datenmatrix")
PgmArg("m2", "Ein2=#1", "Name der 2. Datenmatrix")
PgmOptArg("aus", "Output=#1;PrintMode=false", "Name der Ausgabedatei")
PgmXArg("*=*", "SelDef=paste(' ', SelDef, #1)", NULL)
PgmOptArg("name=var", NULL, "Selektionsparameter")

loadarg;

mdmat md1 = mdload(Ein1, SelDef, VarDef);
mdmat md2 = mdload(Ein2, SelDef, VarDef);

if	(Reduce)
{
	md1.reduce();
	md2.reduce();
}

if	(Expr)
{
	eval(sprintf("virtual %s _EVALFUNC(%s x, %s y) return (%s);",
		bool, md1.type, md2.type, Expr));
	Funktion = _EVALFUNC;
}

//mdmat md = mdexpr(Funktion, md1, md2);

//md.mark("#-1").print(iostd, "nohead");

bool LISTCMP(List_t a, List_t b)
{
	int xdim = dim(a);
	
	if	(xdim != dim(b))	return true;

	for (int i = 0; i < xdim; i++)
	{
		if	(Funktion(a.obj, b.obj))	return true;

		a = a.next;
		b = b.next;
	}

	return false;
}

PrintListBegin = NULL;
PrintListEnd = NULL;

bool subcmp(str mask)
	return LISTCMP(md1.data(mask), md2.data(mask));

void display(str mask)
{
	printf("%s: ", mask);
	iostd << md1.data(mask);
	iostd << " != "
	iostd << md2.data(mask);
	iostd << '\n';
}

void walk(mdaxis x, str mask, int depth)
{
	depth++;
	str idx = sprintf("#%d", depth);

	if	(x)
	{
		for (z in md1.label(idx))
		{
			str submask = paste(" ", mask, paste("=", idx, z));

			if	(subcmp(submask))
				walk(x.next, submask, depth);
		}
	}
	else	display(mask);
}

walk(md1.axis, NULL, 0);

free(md1);
free(md2);
