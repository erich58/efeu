/*
:*:	evaluate data cube expression
:de:	Zwei Datenmatrizen verkn체pfen

$Copyright (C) 1997, 2001 Erich Fr체hst체ck
This file is part of EFEU.

EFEU is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

EFEU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with EFEU; see the file COPYING.
If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

VirFunc Function = NULL;
Type_t Type = NULL;
PrintListDelim = "\t";
fmt_float = "%*.*f";
float_prec = 2;

pconfig !
PrintMode = true
MapMode = false

F:file | :eval 'gload(IncPath, "{}")'
	:*:execute command lines in file <file>
	:de:Datei <file> mit Befehlszeilen laden
E:expr | :eval 'geval("{}")'
	:*:evaluate expression <expr>
	:de:Ausdruck <expr> auswerten
-add | :eval 'Function = operator"+"'
	:*:cell by cell addition
	:de:Punktweise Addition (default)
-sub | :eval 'Function = operator"-"'
	:*:cell by cell subtraction
	:de:Punktweise Subtraktion
-mul | :eval 'Function = operator"*"'
	:*:cell by cell multiplication
	:de:Punktweise Multiplikation
-div | :eval 'Function = operator"/"'
	:*:cell by cell division
	:de:Punktweise Division
-min | :eval 'Function = operator"min"'
	:*:cell minimum
	:de:Minimum der beiden Werte
-max | :eval 'Function = operator"max"'
	:*:cell maximum
	:de:Maximum der beiden Werte
f:func | :eval 'eval("Function = {}")'
	:*:cell by cell function/operator
	:de:Funktion/Operator
t:type | :eval 'Type = expr("{}")'
	:*:data type
	:de:Ausgabetype
e:expr | Expr
	:*:expression
	:de:Ausdruck
p:prec | :eval 'float_prec="{}"'
	:*:floating number precision
	:de:Genauigkeit der Zahlenwerte
r | Reduce = true
	:*:remove singular axis
	:de:Entfernen von singul채ren Achsen
m:map | Output; MapMode = true
	:*:create file mapping
	:de:Dateiabbild generieren
v:[name::]var | VarDef: append " "
	:*:select type components
	:de:Variablenselektion
T:title | Title
	:*:set title of output file
	:de:Titel der Ausgabedatei setzen
:file1 | Ein1
	:*:name of first data cube
	:de:Name der 1. Eingabedatei
:file2 | Ein2
	:*:name of second data cube
	:de:Name der 2. Eingabedatei
/.*=.*/<name>=<var> | SelDef: append " "
	:*:selection parameter
	:de:Selektionsparameter
::out | Output; PrintMode = false
	:*:output file
	:de:Name der Ausgabedatei
!

mdmat md1 = mdload(Ein1, SelDef, VarDef);
mdmat md2 = mdload(Ein2, SelDef, VarDef);

if	(flagres("Reduce"))
{
	md1.reduce();
	md2.reduce();
}

if	(Expr)
{
	if	(Type == NULL)
	{
		eval(sprintf("%s x; %s y;", md1.type, md2.type));
		Type = expr("typeof(" + Expr + ")");
	}

	eval(sprintf("virtual %s _EVALFUNC(%s x, %s y) return (%s);",
		Type, md1.type, md2.type, Expr));
	Function = _EVALFUNC;
}

mdmat md = mdexpr(Function, md1, md2);

if	(Type)		md.konv(Type);
if	(Title)		md.title = Title;

if	(flagres("MapMode"))
	md.map(Output);
else if	(flagres("PrintMode"))
	md.mark("#-1").print(iostd, "nohead");
else	md.save(Output);

free(md1);
free(md2);
free(md);
