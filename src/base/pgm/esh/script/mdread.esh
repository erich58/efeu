/*
:*:	read data cube
:de:	Datenmatrix lesen

$Copyright (C) 1997, 2001 Erich Frühstück
This file is part of EFEU.

EFEU is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

EFEU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with EFEU; see the file COPYING.
If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

PrintListDelim = "\t";

pconfig !
Version = "$Id: mdread.esh,v 1.14 2008-02-01 16:16:34 ef Exp $"
PrintMode = true
MapMode = false

x:name | Flags: set "{Flags} x={}"
	:*:column axis name(s)
	:de:Spaltenachsenname(n)
y:name | Flags: set "{Flags} y={}"
	:*:row axis name(s)
	:de:Zeilenachsenname(n)
t:type | Flags: set "{Flags} type={}"
	:*:data type
	:de:Datentype
M | Flags: set "{Flags} magic"
	:*:check magic number
	:de:Test auf Kennung
L:loc | -locale:loc | Locale
	:*:set locale for number format to <loc>
	:de:Lokale für Zahlendarstellung auf <loc> setzen
-sc | SCFlag = true
	:*:convert sc spreadsheet
	:de:SC-Spreadsheet konvertieren

r | Reduce = true
	:*:remove singular axis
	:de:Entfernen von singulären Achsen
m:map | Output; MapMode = true
	:*:create file mapping
	:de:Dateiabbild generieren
v:[name::]var | VarDef: append " "
	:*:select type components
	:de:Variablenselektion
T:title | Title
	:*:set title of output file
	:de:Titel der Ausgabedatei setzen

:file | Input
	:*:input file
	:de:Name der Eingabedatei
/.*=.*/<name>=<var> | SelDef: append " "
	:*:selection parameter
	:de:Selektionsparameter
::out | Output; PrintMode = false
	:*:output file
	:de:Name der Ausgabedatei
!

if	(Locale)	setlocale(LC_ALL, Locale);

mdmat md;

if	(flagres("SCFlag"))
{
	str name = newtemp();
	IO io = open(sprintf("|sc %s >/dev/null", Input), "w");
	fprintf(io, "T%s\nq", name);
	close(io);
	md = mdread(open(name, "r"), Flags);
	deltemp(name);
}
else	md = mdread(open(Input, "rz"), Flags);

if	(md == NULL)
	error("$!: Datei $1 ist keine Datenmatrix.\n", Input);

if	(SelDef || VarDef)	md = reload(md, SelDef, VarDef);

if	(flagres("Reduce"))	md.reduce();
if	(Title)			md.title = Title;

if	(flagres("MapMode"))
	md.map(Output);
else if	(flagres("PrintMode"))
	md.mark("#-1").print(iostd, "nohead");
else	md.save(Output);

free(md);
