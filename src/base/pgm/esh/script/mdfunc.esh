/*
:*:	data cube function
:de:	Funktion auf Datenmatrix anwenden

Copyright (C) 1997, 2001 Erich Frühstück
This file is part of EFEU.

EFEU is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

EFEU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with EFEU; see the file COPYING.
If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

VirFunc Function = NULL;
Type_t Type = NULL;
PrintListDelim = "\t";

pconfig !
#if	Lang == "de"
Ident = "Funktion auf Datenmatrix anwenden"
#else
Ident = "data cube function"
#endif
Version = "2"
Copyright = "(c) 1997, 2001 Erich Frühstück"
PrintMode = true
Mark = "#-1"

F:file | :eval 'gload(IncPath, "{}")'
	:*:execute command lines in file <file>
	:de:Datei <file> mit Befehlszeilen laden
E:expr | :eval 'geval("{}")'
	:*:evaluate expression <expr>
	:de:Ausdruck <expr> auswerten
r | Reduce = true
	:*:remove singulary axis
	:de:Entfernen von singulären Achsen
v:[name::]var | VarDef: append " "
	:*:select type components
	:de:Variablenselektion
T:title | Title
	:*:set title of output file
	:de:Titel der Ausgabedatei setzen
-neg | :eval 'Function = operator"-()"'
	:*:negation
	:de:Negation
-not | :eval 'Function = operator"!()"'
	:*:boolean not
	:de:Boolsche Negation
-cpl | :eval 'Function = operator"~()"'
	:*:bitwise complement
	:de:Bitweises Komplement
-rnd | :eval 'Function = operator"rnd"'
	:*:round to nearest integer
	:de:Runden auf Ganzzahlwerte
f:func | :eval 'eval("Function = {}")'
	:*:function/operator
	:de:Funktion/Operator
t:type | :eval 'Type = expr("{}")'
	:*:data type
	:de:Ausgabetype
e:expr | Expr
	:*:expression
	:de:Ausdruck
x:list | Mark
	:*:list of column axis, default "{Mark}"
	:de:Achsenliste für Spalten, Vorgabe "{Mark}"
p:prec | :eval 'float_prec = {}'
	:*:floating number precission
	:de:Genauigkeit der Zahlenwerte
:file | Input
	:*:input file
	:de:Name der Eingabedatei
/.*=.*/name=var | SelDef: append " "
	:*:selection parameter
	:de:Selektionsparameter
::out | Output; PrintMode = false
	:*:output file
	:de:Name der Ausgabedatei
!

mdmat md = mdload(Input, SelDef, VarDef);

if	(flagres("Reduce"))	md.reduce();

if	(Expr)
{
	if	(Type == NULL)
	{
		eval(sprintf("%s x;", md.type));
		Type = typeof(expr(Expr));
	}

	eval(sprintf("virtual %s _EVALFUNC(%s x) return (%s);",
		Type, md.type, Expr));
	md = mdexpr(_EVALFUNC, md);
}
else
{
	if	(Function)	md = mdexpr(Function, md);
	if	(Type)		md.konv(Type);
}

if	(Title)		md.title = Title;

if	(flagres("PrintMode"))
{
	md.mark(strsub(Mark, ",", " ", true));
	md.print(iostd, "nohead");
}
else	md.save(Output);

free(md);
