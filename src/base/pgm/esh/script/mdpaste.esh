/*
:*:	paste data cubes with regard to axis
:de:	Datenmatrizen bezüglich einer Achse zusammenhängen

$Copyright (C) 1997, 2001 Erich Frühstück
This file is part of EFEU.

EFEU is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

EFEU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with EFEU; see the file COPYING.
If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

PrintListDelim = "\t";

pconfig !
Version = "$Id: mdpaste.esh,v 1.8 2005-07-24 05:12:41 ef Exp $"
PrintMode = true
Name = "#1"

r | Reduce = true
	:*:remove singulary axis
	:de:Entfernen von singulären Achsen
v:[name::]var | VarDef: append " "
	:*:select type components
	:de:Variablenselektion
T:title | Title
	:*:set title of output file
	:de:Titel der Ausgabedatei setzen
s | Sort = true
	:*:sort label of axis
	:de:sortiert die Achsenbezeichner
u | Uniq = true
	:*:sort label of axis, use only last of uniq labels
	:de:sortiert die Achsenbezeichner,
	wobei gleiche Bezeichner nur einmal verwendet werden.
	Bei gleichen Bezeichnern werden die Daten der zuletzt angegebenen
	Datei entnommen.
e:expr | Expr
	:*:expression for comparing, default is "cmp(a,b)".
	:de:definiert einen Vergleichsausdruck für die Sortierung.
	Im Ausdruck stehen die Variablen <a> und <b> für die
	jeweiligen Achsenezeichner.
	Falls <expr> nicht definiert ist,
	wird <|cmp(<a>,<b>)|> verwendet.
n:name | Name
	:*:name of axis for pasting, default is {Name}
	:de:definiert die Achse, bezüglich der die Daten zusammengehängt werden.
	Die Vorgabe ist {Name}.
o:aus | Output; PrintMode = false
	:*:output file
	:de:definiert die Ausgabedatei. Fehlt die Option, wird die resultierende
	Datenmatrix im ASCII-Format zur Standardausgabe geschrieben.
/.*=.*/<name>=<var> | SelDef: append " "
	:*:selection parameter
	:de:Selektionsparameter
+file(s) ... | 
	:*:list of input files.
	:de:ist die Liste der Eingabedatei(en).
!

int n = argc - 1;

if	(Expr)
{
	eval(sprintf("int CompFunc(str a, str b) return %s;\n", Expr));
}
else	Func CompFunc = int cmp(str, str);

struct ENTRY {
	int num;
	int pos;
	str label;
};

int cmp_sort(ENTRY a, ENTRY b)
{
	int n = CompFunc(a.label, b.label);
	return n ? n : cmp(a.pos, b.pos);
}

int cmp_uniq(ENTRY a, ENTRY b)
	return CompFunc(a.label, b.label);

int cmp_pos(ENTRY a, ENTRY b)
	return cmp(a.pos, b.pos);

DataBase DB = DataBase(ENTRY);
mdmat tab[n];

if	(flagres("Uniq"))	DB.sort(cmp_uniq);
else if	(flagres("Sort"))	DB.sort(cmp_sort);

for (int i = 0; i < n; i++)
{
	tab[i] = mdload(argv[i + 1], SelDef, VarDef);

	for (x in tab[i].label(Name))
		DB += { i, dim(DB), x };
}

if	(!flagres("Sort"))	DB.sort(cmp_pos);

/*	Datenfiles überarbeiten
*/

for (i = 0; i < n; i++)
{
	str sel = NULL;

	for (x in DB)
		sel = paste(",", sel, (x.num == i ? x.label : ":" + x.label));

	tab[i] = reload(tab[i], paste("=", Name, sel));

	if	(i > 0)
	{
		tab[0] += tab[i];
		free(tab[i]);
	}
}

if	(flagres("Reduce"))	tab[0].reduce();
if	(Title)			tab[0].title = Title;

if	(flagres("PrintMode"))
	tab[0].mark("#-1").print(iostd, "nohead");
else	tab[0].save(Output);

free(tab[0]);
