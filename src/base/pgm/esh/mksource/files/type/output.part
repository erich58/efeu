/*
Die Funktion |$1| generiert eine allgemeine Darstellungsfunktion.
*/

void TypeDef::output (str name, str desc, str create, str body, str par = NULL)
{
	str iname = "NULL";
	str oname = psub("$1_$2_openout", t_name, name);
	str wname = psub("$1_$2_write", t_name, name);

	Function f = Function("size_t " + wname,
		"EfiType *type, void *opaque_data, void *opaque_par");

	f.fline("%s *data = opaque_data;", t_name);

	if	(par)
	{
		f.fline("%s *par = opaque_par;", par);
	}
	else	f.fline("IO *out = opaque_par;");

	f.body(body);
	f.write(false);

	Function f = Function("void * " + oname, "IO *out, const EfiType *type,
		void *par, const char *opt, const char *arg");

	if	(par)
	{
		f.line("$1 *data = $1_create(out, type, par, opt, arg);", par);
		f.body(create);
		f.line("return data;");
	}
	else
	{
		f.body(create);
		f.line("return out;");
	}

	f.write(false);

	t_odef.append(sprintf("\tEPC_OUTPUT(&Type_%s, %#s, %#s, \
%s, %s, %s, NULL),\n", t_name, name, desc, iname, oname, wname));
}

static str TypeDef::flagdef (str name, IO io)
{
	str f, k, d;

	str fname = sprintf("%s_%s_flag", t_name, name);
	fprintf(src, "static EfiPrintFlag %s[] = {\n", fname);

	while (getline(io, f, k, d))
		fprintf(src, "\t{ %s, %#c, %#s },\n", f, k[0], d);

	src << "};\n\n";
	close(io);
	return fname;
}

static void TypeDef::add_pdef (str name, str desc, str fdef)
{
	List_t list = { name, t_name };

	if	(fdef)
	{
		list.top(psub("$1, tabsize($1)", flagdef(name, fdef)));
	}
	else	list.top("NULL, 0");

	fpsub(src, "static EfiPrintDef $2_$1_output = {\n", list);
	fpsub(src, "\t$2_print_$1, $3\n};\n\n", list);
	t_odef.append(sprintf("\tEPC_PRINT(&Type_%s, %#s, %#s, %s),\n",
		t_name, name, desc, psub("&$2_$1_output", list)));
}

/*
Die Funktion |$1| generiert eine einfache Darstellungsfunktion.
*/

void TypeDef::print (str name, str desc, str body, str par = NULL)
{
	Function f = Function("int $2_print_$1",
		"IO *out, void *opaque_data, unsigned flag", name, t_name);
	f.fline("%s *data = opaque_data;", t_name);
	f.body(body, t_name);
	f.write(false);
	add_pdef(name, desc, par);
}

/*
:*:The function |$1| creates an output function with \mref{printfunc(7)}.
:de:Die Funktion |$1| generiert eine Darstellungsfunktion mithilfe
von \mref{printfunc(7)}.
*/

void TypeDef::pfunc (str name, str desc, IO def, str par = NULL)
{
	Function f = Function("int $2_print_$1",
		"IO *out, void *opaque_data, unsigned flag", name, t_name);
	f.fline("%s *data = opaque_data;", t_name);
	f.line("int n = 0;");
	f.pfbody(def, "out", NULL);
	f.line("io_putc('\\n', out);");
	f.line("n++;");
	f.line("return n;");
	f.write(false);
	add_pdef(name, desc, par);
}

