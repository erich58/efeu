\entry{ClassDef}
\Name
\caption{Klassifikationsdefinitionen für Zähl\-pro\-gram\-me generieren}

\Synopsis
\hang	\#include <classdef.ms>
\hang	ClassDef ClassDef(str decl = NULL, str type = "MdClass_t", str val = NULL);
\hang	void ClassType(IO io, str name, ...)
\hang	void ClassDef::tab(str name, str ext = NULL, str val = NULL)
\hang	void ClassDef::setup(str name, str ext = NULL, str val = NULL)
\hang	void ClassDef::head(str name, str desc)
\hang	void ClassDef::body(str expr, str fmt, int depth = 1)
\hang	void ClassDef::end(str name, int dim, str fmt)
\hang	void ClassDef::complex(str name, str desc, str fdef, int dim, str fmt = NULL)
\hang	void ClassDef::simple(str name, str desc, str expr, int dim, str fmt = NULL)
\hang	void ClassDef::limit(str name, str desc, str expr, int dim, str fmt = NULL)
\hang	void ClassDef::flag(str name, str desc, str expr, str fmt = NULL)
\hang	void ClassDef::switch(str name, str desc, str expr, IO def)
\hang	void ClassDef::test(str name, str desc, str init, IO def)

\Description
Die Funktion \tt{ClassDef} generiert eine Datenstruktur zur Definition von
Klassifikationen, wie sie für Zählprogramme benötigt werden.
Als Argument wird die Datendeklaration \it{decl} für das Zählobjekt übergeben.
Ein Nullpointer steht für die Standarddeklaration "const void *ptr".
Wahlweise kann noch ein anderer Klassifikationstype \it{type} mit zusäzlichen
Variablen und deren Initialisierung \it{val} übergeben werden.

Ein mit \tt{MdClass_t} kompatibler Klassifikationstype
kann mit der Funktion \tt{ClassType} konstruiert werden.
Für die Ausgabestruktur \it{io} wird je
nach Bedarf entweder \tt{hdr} (bei globaler Definition) oder
\tt{src} (bei lokaler Definition) eingesetzt.
Neben dem Namen \it{name} der Datenstruktur wird eine
Liste der zusätzlichen Variablendefinitionen übergeben.
Die Namen \tt{name}, \tt{desc}, \tt{dim}, \tt{idxfmt} und \tt{classify}
sind reserviert und können nicht in Variablendefinitionen verwendet werden.

Mit der Datenstruktur \tt{ClassDef} stehen Funktionen zur Konstruktion
von Klassifikationsfunktionen zur Verfügung. Die Datenstruktur
enthält eine Datenbank, in der jede neu konstruierte
Klassifikationsfunktion eingetragen wird.

Nach Abschluß aller
Definitionen wird mit der Funktion \tt{ClassDef::tab} eine
Tabelle mit den Klassifikationsdefinitionen generiert.
Die Variablen \it{ext} und \it{pext} erlauben die Verwendenung
der gleichen KLassifikationsfunktionen mit unterschiedlichen
Initialisierungen bei einem erweiterten Klassifikationstype.
Dabei wird \it{ext} an dem Namen der
Klassifikationsfunktion angehängt und \it{val} wird anstelle 
der Standardinitialisierung der zusätzlichen Variablen verwendet.

Die Funktion \tt{ClassDef::setup} generiert zusätzlich zur Tabelle
mit den Klassifikationsdefinitionen eine Initialisierungsfunktion,
die die Tabelleneinträge in die globale Datenbank der
Klassifikationsdefinitionen des Zählprogramms stellt.

\sloppy
Die Klassifikationsfunktionen und Tabellendefinitionen werden
zur Vermeidung von Namenskonflikten anderer Programmteile statisch deklariert.
Lediglich die mit \tt{ClassDef::setup} generierten Initialisierungsfunktionen
werden global eingerichtet.
\end

\subsection{Konstruktion von Klassifikationsfunktionen}
Die Funktionen \tt{ClassDef::head}, \tt{ClassDef::body} und
\tt{ClassDef::end} sind elementare Funktionen zur
Konstruktion von Klassifikationsfunktionen.
Sie dienen als Hilfsfunktionen für die eigentlichen Konstruktionsfunktionen und
werden in der Regel nicht direkt verwendet.

\list
\ttitem{ClassDef::head}
generiert eine neue Klassifikationsdefinition
mit Namen \it{name} und Beschreibungstext \it{desc}.
Als Funktionsname wird \tt{cf_}\it{name} verwendet.

\ttitem{ClassDef::body}
erzeugt einzelne Programmzeilen.
Das Argument \it{expr} wird mit Parametersubstitution ausgewertet
und im Register 1 abgelegt. Danach wird \it{fmt}
in Einzelzeilen zerlegt und mit Parametersubstitution ins
Sourcefile geschrieben.
Der Parameter \it{depth} gibt dabei die Einrücktiefe der Zeilen an.

\ttitem{ClassDef::end}
schließt eine neue Klassifikationsdefinition ab.
Für \it{name} muß der gleiche Name wie bei
\tt{ClassDef::head} eingesetzt werden.
Weiters ist die Zahl der Klassen (\it{dim})
und ein Formatstring \it{fmt} für die Definition der Klassenindizes
zu übergeben. Diese Variablen dienen zur Definition der Makros
\tt{DIM_}\it{name} und \tt{IDX_}\it{name}, die später
bei der Tabellenkonstruktion benötigt werden. 
\end

Kernstück jeder Klassifikationsfunktion ist ein Ausdruck \it{expr},
der aus dem Zählobjekt, aus Parametern der Klassifikationsdefinition und
aus globalen Variablen gewonnen wird.
Der Zugriff auf das Zählobjekt erfolgt entsprechend seiner Deklaration
bei der Initialisierung mit \tt{ClassDef}.
Die Klassifikationsdefinition steht unter dem Namen \it{cdef}
zur Verfügung.

\list
\ttitem{ClassDef::complex} erlaubt die Konstruktion
einer beliebigen Klassifikationsfunktion.
Mit \it{fdef} wird der Funktionsrumpf übergeben.

\ttitem{ClassDef::simple} konstruiert eine einfache Klassifikationsfunktion.
Der Ausdruck \it{expr} selbst liefert den Klassenindex. Als Argument sind noch
die Zahl der Klassen und der Formatstring für die Klassenbezeichner zu
übergeben.

\ttitem{ClassDef::limit} generiert eine Klassifikationsfunktion
analog zu \tt{ClassDef::simple}, jedoch wird der Klassenindex mit
der Klassenzahl limitiert.

\ttitem{ClassDef::flag} konstruiert eine Testfunktion mit
einer Klasse. Falls \it{expr} wahr ist, wird das Objekt gezählt.
Durch \it{fmt} wird der Achsenbezeichner festgelegt.

\ttitem{ClassDef::switch} verwendet \it{expr} als switch-Variable.
Die IO-Struktur \it{io} enthält Definitionszeilen mit den Spalten
\it{key}, \it{idx} und \it{desc}. Dabei gibt \it{key} den case-Schlüssel
im switch-Statement, \it{idx} den Klassenbezeichner und \it{desc}
einen optionalen Beschreibungstext an.
Fehlt der Klassenbezeichner (und damit auch der Beschreibungstext)
gehört der Schlüssel zur selben KLasse wie der nachfolgende Eintrag.
Ein Stern als Schlüssel steht für \tt{default} im switch-Statement. 
Fehlt dieser Eintrag, werden Objekte, die keinem Schlüssel entsprechen,
bei dieser Klassifikation nicht gezählt.

\ttitem{ClassDef::test} generiert eine Klassifikation mit
if-Anweisungen. Der Ausdruck \it{init} wird am Anfang der Funktion
ausgegeben und erlaubt die Deklaration und Initialisierung von Hilfsvariablen.
Die IO-Struktur \it{io} enthält Definitionszeilen mit den Spalten
\it{key}, \it{idx} und \it{desc}. Dabei gibt \it{key} den Testausdruck
in der if-Anweisung an. Er darf keine Leerzeichen enthalten.

Die Variable \it{idx} gibt den Klassenbezeichner und \it{desc}
einen optionalen Beschreibungstext an.
gehört die Abfrage zur nächsten 
Fehlt der Klassenbezeichner (und damit auch der Beschreibungstext)
gehört die Abfrage zur selben KLasse wie der nachfolgende Eintrag.
Ein Stern als Schlüssel steht für den else-Zweig.
Er muß als letzter Eintrag angegeben werden.
Fehlt er, werden Objekte, die keiner Abfrage entsprechen,
bei dieser Klassifikation nicht gezählt.
\end
\SeeAlso
\tt{Function(7)}.
