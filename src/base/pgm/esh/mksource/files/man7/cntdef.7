\Name
CntDef -- Konstruktion von Zählobjekten und Klassen
\Synopsis
\tthang
\#include \<cntdef.ms\>

virtual inline CntDef CntDef (str <type> = NULL, bool <glob> = true);

virtual inline CntDef CntDef (str <name>, int <n>, IO <def>,
bool <glob> = true);

void CntDef::init (str <name>, str <args> = NULL, str <body> = NULL);

void CntDef::setup (str <name>, str <pfx> = NULL);

void CntDef::cntobj (str <name>, str <desc>, Type_t <type>, IO <def>);

void CntDef::classfunc (str <name>, str <desc>, str <fdef>, IO <def>);

void CntDef::simple (str <name>, str <desc>, str <expr>, int <n>,
str <fmt> = NULL, str <label> = NULL);

void CntDef::limit (str <name>, str <desc>, str <expr>, int <n>,
str <fmt> = NULL, str <label> = NULL);

void CntDef::range (str <name>, str <desc>, str <expr>, int <first>,
int <last>, str <fmt> = NULL, str <label> = NULL);

void CntDef::flag (str <name>, str <desc>, str <expr>, str <fmt> = NULL)

virtual void CntDef::switch (str <name>, str <desc>,
str <expr>, str <fmt>, IO <def>);

virtual void CntDef::switch (str <name>, str <desc>, str <expr>, IO <def>);

virtual void CntDef::test (str <name>, str <desc>, str <init>,
str <fmt>, IO <def>);

virtual void CntDef::test (str <name>, str <desc>, str <init>, IO <def>);

void CntDef::complex (str <name>, str <desc>, IO <def>);

\Description

Die Struktur |CntDef| dient zur Konstruktion von Zählobjekten und
Zählklassifikationen. Sämtliche Hilfsfunktionen und Hilfstabellen
werden statisch eingerichtet. Der Zugriff erfolgt über
Initialisierungsfunktionen, die wahlweise statisch oder global
eingerichtet werden.

Die erste Form des Konstruktors richtet
Zähldefinitionen ein, die Parameterwerte ausschließlich über
globale Variablen oder über den mit |md_count| übergebenen Datenpointer
erhalten. Die Variable <type> gibt den Datentype des Datenpointers an.
wird ein Nullstring übergeben, wird <"|const void *|"> verwendet.

Der zweite Konstruktor verwendet einen Schnittstellenvektor der
Dimension <n> zur Kommunikation mit den Zählfunktionen.
Die Datenstruktur wird mit
der Funktion |Struct| (Vergleiche dazu \mref{struct(7)}) aus <def>
generiert und hat den Type <name>|_t|.

Mithilfe von |CntDef::init| kann eine
Initialisierungsfunktion für die Zählvariablen eingerichtet werden.
Die Initialisierungsfunktion hat als erstes Argument den Index auf
den Schnittstellenvektor und liefert den entsprechenden Pointer.

Die Funktion |CntDef::setup| richtet statische Vektoren mit den
Zählobjekten und den Klassifikationen ein. Weiters konstruiert
sie eine Funktion zum Eintragen der entsprechenden Einträge
in die Zähldatenbanken.

\shead	Zählobjekt

Ein Zählobjekt wird mit der Funktion |CntDef::cntobj| eingerichtet.
Dies erfolgt mit der Funktion |CntObj| (Vergleiche dazu
\mref{cntobj(7)}).

\shead	Klassifikationsfunktionen

[|CntDef::classfunc|]
	definiert eine frei gestaltete Klassifikationsfunktion.
	Die Variable <fdef> definiert den Funktionsrumpf und
	die Eingabestruktur <def> definiert die Klassenkennungen.
	Jede Zeile von <def> enthält eine Kennung und einen
	Beschreibungstext.

[|CntDef::simple|]
	generiert eine einfache Klassifikationsfunktion mit <n>
	Klassen. Der Rückgabewert der Funktion wird vom Ausdruck
	<expr> bestimmt. Die Variablen <fmt> und <lbl> dienen zur
	Konstruktion der Kennungen und Beschreibungen.

[|CntDef::limit|]
	generiert eine lineare Klassifikation mit einer offenen Klasse
	am Ende. Der Ausdruck <expr> liefert den Klassenindex.

[|CntDef::range|]
	generiert eine lineare Klassifikation mit einer offenen Klasse
	am Anfang und am Ende. Der Ausdruck <expr> liefert den Klassenindex.
	Die Variablen <first> und <last> bestimmen die untere, bzw.
	obere Grenze für die zwei offenen Klassen.

[|CntDef::flag|]
	liefert eine Klassifikation mit einer Ausprägung,
	die nur Daten zählt, für die der Ausdruck <expr> wahr ist.

[|CntDef::switch|]
	konstruiert eine Klassifikation mithilfe eines
	|switch|-Blocks.

[|CntDef::test|]
	konstruiert eine Klassifikation mithilfe von
	|if|-Anweisungen.

[|CntDef::complex|]
	erlaubt die Konstruktion einer Klassifikation, bei der
	|switch|-Blöcke und |if|-Anweisungen beliebig kombiniert
	und verschachtelt werden können.

\Examples
Das erste Beispiel zeigt die Konstruktion eines Zählobjektes für
Fälle und eine Klasse für die Gesamtheit.

\spage[3]
@MSExample(cnt1.bsp,erzeugt die Programmzeilen)
\end

Das zweite Beispiel zeigt eine Zähldefinition mit einer
Zählvariablenstruktur.

\spage[3]
@MSExample(cnt2.bsp,erzeugt die Programmzeilen)
\end

\SeeAlso
\mref{mksource(1)}, \mref{function(7)}.

