/*
:*:basic commands
:de:Basisbefehle

$Copyright (C) 1999 Erich Frühstück
This file is part of EFEU.

EFEU is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

EFEU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with EFEU; see the file COPYING.
If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

:*:idle command
:de:Leerbefehl

:*:the command $1 does nothing
:de:Der Befehl $1 bewirkt nichts.

\def\relax	;

:*:new command table
:de:Neue Befehlstabelle

:*:The command $1 cerates a new table for commands, macros and vars
and pushes it to the table stack.
:de:Der Befehl $1 generiert eine neue Tabelle für Befehle, Makros und
Variablen und legt sie am Tabellenstack ab.

\def\push	push(NULL);

:*:remove command table
:de:Befehlstabelle entfernen

:*:The command $1 removes the lowest table from the table stack.
:de:Der Befehl $1 entfernt die unterste Tabelle vom Tabellenstack.

\def\pop	pop();

:*:comment
	$1 <comment>
:de:Kommentar
	$1 <Kommentar>

:*:The command $1 writes a commend to the output file.
:de:Der Befehl $1 schreibt einen Kommentar in das Ausgabefile.

\def\rem	comment(ParseLine(cin));	

:*:load configuration file
	$1 <name>
:de:Konfigurationsfile laden
	$1 <name>

:*:The command $1 loads the configuration file <name>.
:de:Der Befehl $1 ladet die Befehle in der Konfigurationsdatei <name>.

\def\config	config(xexpand(ParseLine(cin)));

:*:include file
	$1 |[|<flags>|]| <name>
:de:Datei einbinden
	$1 |[|<flags>|]| <name>

:*:The command $1 inserts file <name> at current position.
The following control flags could be used:
[|verbatim|]
	verbatim text without interpretation of special characters.
	Tabulators are replaced by spaces.
[|latex|]
	plain LaTeX text.
[|html|]
	plain HTML text
[|man|]
	plain manpage text
[|ignore|]
	load text but ignore output
[|eval|]
	evaluate file with EFEU command interpreter
[|geval|]
	evaluate file with EFEU command interpreter, new
	variables are created global.
:de:Der Befehl $1 bindet die Datei <file> an der aktuellen Position ein.
Folgende Steuerflags können angegeben werden:
[|verbatim|]
	Wortwörtlicher Text ohne Interpretation von Sonderzeichen.
	Tabulatoren werden durch Leerzeichen ersetzt.
[|latex|]
	Datei enthält LaTeX-Steuersequenzen
[|html|]
	Datei enthält HTML-Steuersequenzen
[|man|]
	Datei enthält nroff-Steuersequnenzen im Handbuchstandard
[|ignore|]
	Datei wird verarbeitet, aber es erfolgt keine Ausgabe.
[|eval|]
	Die Datei wird als Befehlsskript ausgewertet.
[|geval|]
	Die Datei wird als Befehlsskript ausgewertet, wobei neue
	Variablen global angelegt werden.

\def\include	include(ParseOpt(cin, true), xexpand(ParseLine(cin)));

:*:include script file
	$1 |"|<name>|"|
	$1 |<|<name>|>|
:de:Befehlsscript einbinden
	$1 |"|<name>|"|
	$1 |<|<name>|>|

\def\cmdinclude	eval("#include " + ParseLine(cin));

:*:include output of command
	$1 |[|<flags>|]| <cmd>
	~~~~...
:de:Prozesseingabe
	$1 |[|<flags>|]| <cmd>
	~~~~...

:*:The command $1 inserts the output of the command <cmd>
at current position. The flags are the same as in |\include|.
:de:Der Befehl $1 bindet die Ausgabe des Kommandos <cmd> ein.
Die Flags <flags> sind äquivalent zu |\include|.

\def\pipe input(ParseOpt(cin, true), popen(xexpand(ParseLine(cin, true)), "r"))

:*:evaluate expression
	$1 <expr>\br
	$1 |{|<expr>|}|
:de:Ausdruck auswerten
	$1 <Ausdruck>\br
	$1 |{|<Ausdruck>|}|

:*:The command $1 evaluates <expr> and inserts the result
at current position.
:de:Der Befehl $1 wertet den nachfolgenden Ausdruck <Ausdruck> aus und
stellt das Ergebnis in die Standardeingabe. Der Ausdruck kann
wahlweise als Befehlszeile oder als Block mit geschwungenen
Klammern angegeben werden.

:*:Example: |\eval{3*5}| results in \protect\eval{3*5}.
:de:Beispiel: |\eval{3*5}| liefert \protect\eval{3*5}.

\def\eval	eval(ParseExpr(cin));

:*:evaluate expression global
	$1 <expr>\br
	$1 |{|<expr>|}|
:de:Ausdruck global auswerten
	$1 <Ausdruck>\br
	$1 |{|<Ausdruck>|}|

:*:This command acts like |\eval| but new variables are created global.
:de:Der Befehl $1 arbeitet wie |\eval|, jedoch werden neue Variablen
global angelegt.

\def\geval	geval(ParseExpr(cin));

:*:get path of document file
	$1 <name>\br
	$1 |{|<name>|}|
:de:Pfadname einer Dokumentdatei suchen
	$1 <Name>\br
	$1 |{|<Name>|}|

:*:The command searches the file <name> relating to the current
document path and returns the path name if found.
:de:Der Befehl $1 sucht nach der Datei <name> in Bezug auf den
aktuellen Dokumentpfad und liefert bei Erfolg den Pfadnamen.

\def\docfile	{{
	str fname = fsearch(DocPath, xexpand(ParseArg(cin)));
	depend(fname);
	cout << fname;
}}

/*	index entry
*/

:*:index entry
	$1 <|[<entry>]{<text>}|>
:de:Indexeintrag
	$1 <|[<Eintrag>]{<Bereich>}|>

:*:The command $1 creates an index entry <entry> to the text <text>.
If <entry> is missing, <text> would be used.
:de:Der Befehl $1 generiert einen Indexeintrag <Eintrag> zu einem
Textbereich <Bereich>.
Fehlt <Eintrag> wird <Bereich> als Indexeintrag verwendet.

\def\index	{{
	str opt = ParseOpt(cin, true);
	str arg = ParseArg(cin);

	if	(!opt)	opt = arg;

	mode('h');
	index(xexpand(opt), expand(opt));
	cout << arg;
}}

/*	Zeichen zurückschreiben
*/

:*:line feed
	$1
:de:Zeilenvorschub
	$1

:*:The command $1 writes a linefeed back to the input stream.
:de:Der Befehl $1 schreibt einen Zeilenvorschub zurück.

\def\n	cin.ungetc('\n');

:*:tabulator key
	$1
:de:Tabulator
	$1

:*:The command $1 writes a tabulator key back to the input stream.
:de:Der Befehl $1 schreibt einen Tabulator zurück.

\def\t	cin.ungetc('\t');


/*	LaTeX commands
*/

:*:\LaTeX; code
	$1 <|[<alt>] {<code>}|>
	$1 <|[<alt>] <code>|>
:de:\LaTeX-Befehl
	$1 <|[<Alternative>] {<LaTeX-Code>}|>\br
	$1 <|[<Alternative>] <LaTeX-Code>|>

:*:The command allows to insert latex code <code> for the latex driver.
All other drivers use <alt> instead.
:de:Der Befehl $1 erlaubt die direkte Ausgabe von \LaTeX-Code an den
LaTeX-Treiber. Bei allen anderen Ausgabetreibern wird die Alternative
ausgegeben.

\def\latex	{{
	str alt = ParseOpt(cin, true);
	str arg = ParseArg(cin);

	if	(!arg)	arg = ParseLine(cin) + "\n";

	if	(!plaintex(arg)) cout << alt;
}}

:*:mathematic typesetting
	$1 <|{<formular>}|>
:de:Mathematischer Formelsatz
	$1 <|{<Formel>}|>

\def\math	{{
	str cmd = ParseArg(cin);

	if	(!plaintex("$" + cmd + "$"))
		plain(cmd);
}}

