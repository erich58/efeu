/*
:*:conditional expressions
:de:Bedingte Ausdrücke

$Copyright (C) 1999 Erich Frühstück
This file is part of EFEU.

EFEU is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

EFEU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with EFEU; see the file COPYING.
If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

:*:conditional expression
	$1 |(|<expr>|,|<ifpart>|,|<elsepart>|)|
:de:Bedingter Ausdruck
	$1 |(|<expr>|,|<ifpart>|,|<elsepart>|)|

:de:Falls <expr> wahr ist, wird <ifpart> ausgegeben, ansonsten <elsepart>.

\def@if	 \eval{cout << (($1) ? "$2" : "$3");}

:*:conditional block
:de:Testblock
	$1 |{|<expr>|}| <ifpart> \[|\else| <elsepart>\] |\endif|\br

:de:Falls <expr> wahr ist, wird <ifpart> ausgegeben, ansonsten <elsepart>.
Das Schlüsselwort |\else| kann zusammen mit <elsepart> entfallen.
Testblöcke können verschachtelt werden. Kommentare und mit |||| ... ||||
oder |----| ... |----| geklammerte Textteile werden nicht nach
Schlüsselwörtern untersucht.

\def\if	{ cout << ParseBlock(cin, expr(ParseExpr(cin)),
	"if", "endif", "else"); }

/*
PROBLEM:
Das Aufspalten der Liste mit split liefert keine gute Zerlegung:
Keine Maskierung, Leerfelder bei mehreren weißen Zeichen
hinterainander oder am Ende der Liste, ...

Textschleife
	$1 <List> |\do| <Block> |\done|

Der Text <Block> wird für jedes Argument der Liste <List>
ausgeführt. Die einzelnen Werte der Liste sind durch Leerzeichen oder
Komma getrennt. Im Text <Block> wird |$1| gegen das aktuelle Argument
ersetzt.

\def\for {{
	str list = ParseBlock(cin, 1, NULL, "do", NULL);
	str expr = ParseBlock(cin, 1, "do", "done", NULL);

	for (x in split(list, "%s,"))
		cout << psub(expr, x);
}}
*/
