/*
:*:create manual pages from source
:de:Handbucheinträge aus Sourcefiles generieren

$Copyright (C) 2000 Erich Frühstück
This file is part of EFEU.

EFEU is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

EFEU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with EFEU; see the file COPYING.
If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

\eval	{
struct SourceListEntry {
	str name;
	str path;
};

int SourceListComp(SourceListEntry a, SourceListEntry b)
{
	int n = lexcmp(a.name, b.name);
	return n ? n : cmp(a.path, b.path);
}

DataBase SourceList = DataBase(SourceListEntry, SourceListComp);
}

:*:expand source list with files of directory tree
	$1 <dir>
:de:Liste der Programmsourcen um Dateien in Bibliothek erweitern
	$1 <dir>

:de:Der Befehl $1 erweitert die Liste der Programmsourcen zur Konstruktion von
Handbucheinträgen mit allen Dateien aus der Bibliothek <dir>.
Fehlt die Angabe von <dir>, wird der Bibliotheksname der aktuellen
Eingabedatei genommen.

\def\addsrclist {{
str path = xexpand(ParseLine(cin));

if	(!path)	path = DocDir;

path = path ? path + "/" : ".";

for (x in split(filter("mksrclist " + path)))
	if	(x != DocName)
		SourceList += { basename(x), x };
}}

\def\addsrcpath {{
str path = xexpand(ParseLine(cin));

for (dir in split(path, ":"))
{
	if	(!FileStat(dir))
		continue;

	for (x in split(filter("mksrclist " + dir)))
		if	(x != DocName)
			SourceList += { basename(x), x };
}
}}

:*:expand source list with single file
	$1 <file>
:de:Liste der Programmsourcen um Einzeldatei erweitern
	$1 <name>

:de:Der Befehl $1 erweitert die Liste der Programmsourcen mit der
Datei <name>.

\def\addsrc {{
str x = fsearch(NULL, xexpand(ParseLine(cin)), NULL);

if	(x)
	SourceList += { basename(x), x };
}}


:*:print source list
	$1 <fmt>
:de:Aktuelle Liste der Programmsourcen ausgeben
	$1 <fmt>

:de:Der Befehl $1 gibt die aktuelle Liste der Programmsourcen aus.

\def\printsrclist {{
	str fmt = ParseLine(cin);
	fmt = fmt ? fmt + "\n" : "$1: $2\n";

	for (x in SourceList)
		fpsub(cout, fmt, x.name, x.path);
}}

:*:remove files from source list
	$1 <pattern>
:de:Dateien aus der Liste der Programmsourcen löschen
	$1 <list>

:de:Der Befehl $1 löscht alle Dateien aus der Liste der Programmsourcen,
die der Musterliste <list> entsprechen. Eine leere Liste löcht alle
Einträge.

\def\delsrc {{
	List_t list = split(ParseLine(cin));
	int i = 0;

	while (i < dim(SourceList))
	{
		if	(pselect(SourceList[i].name, list))
			SourceList.delete(i, 1);
		else	i++;
	}
}}

:*:create manual page from source
	$1 |[|<flags>|]| <pattern list>
:de:Handbucheinträge aus Programmsourcen generieren
	$1 |[|<flags>|]| <Musterliste>

:de:Das Argument <Musterliste> gibt eine Liste von Selektionsmustern an.
Der Optionale Parameter <flags> erlaubt die Übergabe von Optionen
an das Kommando |src2doc|.

\def\src2doc {{
str cmd = paste(" ", "src2doc", ParseOpt(cin, true)) + " ";
List_t list = split(ParseLine(cin, true));

for (x in SourceList)
	if (pselect(x.name, list))
		MakeDepend ? depend(x.path) : cout << filter(cmd + x.path);
}}

:*:include files of source list
	$1 <pattern list>
:de:Dateien der Sourceliste einbinden
	$1 <Musterliste>

:de:Das Argument <list> gibt eine Liste von Selektionsmustern zur
Auswahl der Dateien an.

\def\srcinclude {{
str cmd = ParseOpt(cin, true);
List_t list = split(ParseLine(cin, true));
cmd = cmd ? "|" + cmd : "$1";

for (x in SourceList)
	if (pselect(x.name, list))
		include(NULL, x.path);
}}

:*:insert files of source list
	$1 |[|<cmd>|]| <pattern list>
:de:Dateien der Sourceliste einbinden
	$1 |[|<cmd>|]| <list>

:de:Das Argument <list> gibt eine Liste von Selektionsmustern zur
Auswahl der Dateien an.
Der optionale Parameter <cmd> bestimmt das Filterprogramm zur
Aufbereitung des Datenfiles.

\def\getsrc {{
str cmd = ParseOpt(cin, true);
List_t list = split(ParseLine(cin, true));
cmd = cmd ? "|" + cmd : "$1";

for (x in SourceList)
	if (pselect(x.name, list))
		MakeDepend ? depend(x.path) : \
			copy(open(psub(cmd, x.path), "rz"), cout);
}}
