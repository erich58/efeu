/*	Hilfsfunktionen zur Tabellengenerierung
	(c) 1997 Erich Frühstück
	A-1090 Wien, Währinger Straße 64/6
*/

#ifndef	_Include_SynTab
#define	_Include_SynTab	1

#include <TabLabel>


/*	Tabellenumgebung
*/

struct SynTab {
	IO io;		/* Ausgabestruktur */
	int cols;	/* Aktuelle Spaltenzahl */
	bool pictmode;	/* Bildmodus */
	int height;	/* Höhe des Bildobjekts */
	bool cont;	/* Fortsetzungstabelle */
};

SynTab SynTab (IO io, bool clrpage = true, bool cont = false)
{
	if	(clrpage)	io << "\n\\clearpage\n";

	if	(cont)
		io << "\\begin{SynTableF}\n";
	else	io << "\\begin{SynTable}\n";

	return { io, 0, false, 0, cont };
}

SynTab SynTab (IO io, int margin, bool clrpage = true, bool cont = false)
{
	if	(clrpage)	io << "\n\\clearpage\n";

	fprintf(io, "\\begin{SynTable%s}[%d]\n", (cont ? "F" : ""), margin);
	return { io, 0, false, 0, cont };
}

void SynTab ()
	fprintf(this.io, "\\end{SynTable%s}\n", (this.cont ? "F" : ""));

void SynTab::printf(str fmt, ...)
	fprintf(this.io, fmt, va_list)

void SynTab::line(str arg)
	fprintf(this.io, "%s\n", arg)
	
void SynTab::caption(str hname, str sname)
	this.printf("\\caption{%s}\n\\subcaption{%s}\n", hname, sname)

void SynTab::def(str name, str def)
	this.printf("\\def\\%s{%s}\n", name, def)

virtual void SynTab::note(str name)
	this.printf("\\note{%s}\n", name);

virtual void SynTab::note(...)
	for (x in va_list) this.printf("\\note{%s}\n", x);

/*
virtual void SynTab::cmdline(str cmd)
	this.printf("\\%s\n", cmd)

virtual void SynTab::cmdline(str cmd, str arg)
	this.printf("\\%s{%s}\n", cmd, arg)

virtual void SynTab::cmdline(str cmd, str opt, str arg)
	this.printf("\\%s[%s]{%s}\n", cmd, opt, arg)
*/

virtual void SynTab::begin(TabLabel col, int width = 2, int height = 2)
{
	if	(!col)	col = CDummyTabLabel;

	this.printf("\n\\begin{SynTab}{%d}", height);

	str delim = "{";

	for (x in col.tab)
	{
		this.printf("%s%d", delim, x.width ? x.width : width);
		delim = ",";
	}

	this.io << "}\n\\thislinebold\n"
	this.io << col.special;
	this.io << "\\norule";

	for (x in col.tab)
		this.printf(" & %s", x.label);

	this.io << " \\cr\n";
	this.cols = dim(col.tab);
}

virtual void SynTab::tabline()
	this.io << "\\cr\n";

virtual void SynTab::tabline(str label)
{
	this.io << label;

	for (int i = 0; i < this.cols; i++)
		this.io << " &";

	this.io << " \\cr\n";
}

virtual void SynTab::tabline(str label, ...)
{
	PrintListDelim = " & ";
	PrintListBegin = NULL;
	PrintListEnd = NULL;
	fmt_str = "%*s";

	this.io << label << " & ";
	this.io << va_list;
	this.io << " \\cr\n";
}

virtual void SynTab::body(TabLabel line, mdmat md, VirFunc ifunc = NULL, int lag = 0)
{
	if	(!line)	line = LDummyTabLabel;

	this.io << line.special;

	for (x in line.tab)
	{
		this.io << x.special;

		if	(md && x.name)
			this.tabline(x.label, md.data(x.name, ifunc, lag));
		else	this.tabline(x.label);
	}
}

void SynTab::end()
{
	if	(this.pictmode)
	{
		this.io << "\\endpicture\n\\par\\vss}\n\n";
		fprintf(this.io, "\\vspace{%d\\baselineskip}\n\n",
			this.height + 3);
		this.pictmode = false;
	}
	else 	this.io << "\\end{SynTab}\n\n";

	this.cols = 0;
	this.height = 0;
}

void SynTab::picture(int height = 14, int xpos = 0, int ypos = 0)
{
	this.height = height;
	this.pictmode = true;
	this.io << "\n\\vspace{-1\\baselineskip}\n"
	this.io << "\\leavevmode\\vbox to 0pt {\\hsize\\textwidth\n"
	this.io << "\\beginpicture\n"
	this.io << "\\setcoordinatesystem units <12mm,\\baselineskip>";
	fprintf(this.io, " point at %d %d\n", xpos, ypos);
	fprintf(this.io, "\\put {\\strut} at 0 -1\n");
	fprintf(this.io, "\\put {\\strut} at 0 %d\n", this.height + 1);
}

#endif	/* _Include_SynTab */
