/*
:*:commands to include created source files
:de:Befehle zur Sourcefilegenerierung

$Copyright (C) 2000 Erich Frühstück
This file is part of EFEU.

EFEU is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

EFEU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with EFEU; see the file COPYING.
If not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

\eval	{
	int ms_exnum = 1;	// Laufnummer für Beispiele 
}


:*:create sourcefile
	$1 <file>
:de:Sourcefile generieren
	$1 <Datei>

:*:The command $1 calls |mksource| with the given script
and includes the created files in verbatim mode.
:de:Der Befehl $1 wendet |mksource| auf die angegebene Skriptdatei
an und bindet die Ergebnisdateien wortwörtlich ein.

\def\mksource {{
str fname = fsearch(DocPath, xexpand(ParseLine(cin)), NULL);

if	(fname)
{
	str name = filename(fname);
	str tmp = newtempdir("ms_");
	copy(open(fname, "r"), open(sprintf("%s/%s.tpl", tmp, name), "w"));

	str list = filter(sprintf("( cd %s; mksource -s -l %s.tpl | sort -r )",
		tmp, name));
	system(sprintf("( cd %s; mksource -s %s.tpl )", tmp, name));

	for (x in split(list, "%s"))
	{
		fprintf(cout, "<*%s*>\n\n", x);
		cout << "---- verbatim\n";
		copy(open(sprintf("%s/%s", tmp, x), "r"), cout);
		cout << "----\n";
	}

	deltempdir(tmp);
}
}}

:*:execute |mksource| example
	$1 <name>
	<example script>
	|\\end|
:de:Beispiel für |mksource| ausführen
	$1 <name>
	<Beispielskript>
	|\\end|

:*:The command $1 calls |mksource| with the given example script
and includes it together with all created files in verbatim mode.
:de:Der Befehl $1 wendet |mksource| auf das Beispielskript
an und bindet dieses mit allen Ergebnisdateien wortwörtlich ein.

\def\ms_example	{{
	str desc = ParseLine(cin);
	str name = strcut(desc, "%s");
	str body = ParseRegion(cin, "\\\\end");

	if	(!name)
		name = sprintf("ex%d", ms_exnum++);

	fprintf(cout, "\n\n<*%s.tpl*>\n\n", name);
	cout << "---- verbatim\n";
	copy(body, cout);
	cout << "----\n\n";

	str tmp = newtempdir("ms_");
	puts(body, open(sprintf("%s/%s.tpl", tmp, name), "w"));

	str list = filter(sprintf("( cd %s; mksource -s -l %s.tpl )",
		tmp, name));
	system(sprintf("( cd %s; mksource -s %s.tpl )", tmp, name));

	for (x in split(list, "%s"))
	{
		fprintf(cout, "<*%s*>\n\n", x);
		cout << "---- verbatim\n";
		copy(open(sprintf("%s/%s", tmp, x), "r"), cout);
		cout << "----\n\n";
	}

	deltempdir(tmp);
}}

:*:include mksource example
	$1 |(|<name>,<text>|)|
:de:mksource Beispiel einbinden
	$1 |(|<name>,<text>|)|

:*:The makro $1 includes a |mksource| example script and
the target file(s), where <name> is the name of the script and
<text> is the separating text between source and target file(s).
:de:Der Makro bindet ein Beispielskript und sein Ergebnis ein.
Dabei ist <name> der Name des Skripts und <text> der Trenntext
zwischen Skriptfile und den Ergebnisdateien.

\def@MSExample
<*$1*>
\include[verbatim] $1
$2\par
\mksource $1
