# :*:	determine c-flags for use of external libraries
# :de: 	Bestimmung von C-Flags zur Einbindung externer Bibliotheken
#
# $Synopsis
# include $1
#
# $Copyright (C) 2008 Erich Frühstück
# This file is part of EFEU.
# 
# EFEU is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
# 
# EFEU is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with EFEU; see the file COPYING.
# If not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

test $_cflags_smh && return
_cflags_smh=1

include cc.smh

# Pfad aufspalten

_cflags_path ()
{
	splitpath `expr "$*" : '..\(.*\)'` | tr : ' '
}


# Absoluten Dateinamen bestimmen.

_cflags_name ()
{
	name=$1
	shift

	for x
	do
		if [ -f $x/$name ]; then
			printf " %s" $x/$name
			return 0
		fi
	done

	for x in $cc_lpath
	do
		if [ -f $x/$name ]; then
			printf " %s" $x/$name
			return 0
		fi
	done

	return 1
}

# Include-Verzeichnis für Header bestimmen.

_cflags_incdir ()
{
	name=$1
	shift

	for x
	do
		if [ -f $x/$name ]; then
			printf -- " -I%s" $x
			return 0
		fi
	done

	for x in /usr/include
	do
		if [ -f $x/$name ]; then
			return 0
		fi
	done

	return 1
}

# Link-Flags bestimmen

_cflags_libname ()
{
	while read name
	do
		case "$name" in
		*.a)	lib=`expr "$name" : '.*/lib\(.*\).a$'`;;
		*.so)	lib=`expr "$name" : '.*/lib\(.*\).so$'`;;
		*)	continue;
		esac

		case "$1" in
		-L)	printf -- " -L%s -l%s" `dirname $name` "$lib";;
		*)	printf -- " -l%s" "$lib";;
		esac

		return 0
	done

	return 1
}

_cflags_lib ()
{
	name=`expr "$1" : '..\(.*\)'`
	shift

	find $* -maxdepth 1 -name "lib$name.*" |
		_cflags_libname -L && return 0

	find $cc_lpath -maxdepth 1 -name "lib$name.*" |
		_cflags_libname && return 0

	return 1
}

# $alias
# $pconfig !
# :name |
#	:*:name <name> of macro with found flags.
#	:de:Name <name> des Makros für die gefundenen Flags.
# I::path |
#	:*:additionaly path to search header files.
#	:de:Zusätzlicher Suchpfad für Kopfdateien.
# L::path |
#	:*:additionaly path to search libraries.
#	:de:Zusätzlicher Suchpfad für Bibliotheken.
# a |
#	:*:try next search only if last search was successfull.
#	:de:Nächste Suche nur durchführen, wenn letzte Suche erfolgreich war.
# o |
#	:*:try next search only if last search failed.
#	:de:Nächste Suche nur durchführen, wenn letzte Suche fehlschlug.
# l:lib |
#	:*:search for libraray corresponding to the regular
#	expression |^lib(|<lib>|)\.(a||so)$$|. On success, print out
#	the |-l|<name> flag for linking the library. If the library is
#	not in the default place of the compiler an |-L|<dir> flag is also
#	generated.
#	:de:Suche nach der Bibliothek, die dem regulären
#	Ausdruck |^lib(|<lib>|)\.(a||so)$$| entspricht. Liefert bei
#	Erfolg das entsprechende |-l| flag und falls die Bibliothek
#	nicht im Standarsuchpfad des Kompilers liegt,
#	optional auch ein eintsprechendes |-L|<dir> flag. 
# ::hdr |
#	:*:search directory <dir> which contains header <hdr>, where <hdr> may
#	contain directory parts as in |X11/X.h|. If <dir> is different from
#	|/usr/include|, print out the option |-I|<dir>.
#	:de:Suche nach dem Verzeichnis <dir>, welches die Kopfdatei <hdr>
#	enthält, wobei <name> Pfadteile enthalten kann (z.B: |X11/X.h|)
#	Falls <dir> verschieden von |/usr/include| ist, wird ein Kompilerflag
#	der Form |-I|<dir> erzeugt.
# !
# :*:
# The function $! creates c-flags for use of external libraries.
# The following options and arguments are accepted:
# :de:
# Die Funktion $! bestimmt C-Flags zur Einbindung externer Bibliotheken.
# Die folgenden Optionen und Argumente werden akzeptiert:
#
# @arglist

mf_cflags ()
{
	cc_setup
(
	ipath=
	lpath=

	test "$#" -gt 0 || shmkmf_warg mf_cflags
	printf "%s=" "$1"
	shift

	while [ -n "$1" ]
	do
		case "$1" in
		-a)	shift; [ $last -ne 0 ] && shift;;
		-o)	shift; [ $last -eq 0 ] && shift;;
		-I*)	ipath="$ipath `_cflags_path $1`"; shift;;
		-L*)	lpath="$lpath `_cflags_path $1`"; shift;;
		-l*)	_cflags_lib "$1" $lpath
			last=$?; shift;;
		-*)	shmkmf_invop "mf_cflags" "$1";;
		*.so)	_cflags_name "$1" $lpath
			last=$?; shift;;
		*)	_cflags_incdir "$1" $ipath
			last=$?; shift;;
		esac
	done
	
	printf "\n"
)}

# $Example
#
# \config shmkmf
#
# Die folgende Zeile
# \shmkmf[-x] generiert die Ausgabe
# include cflags.smh
# mf_cflags CPP_READLINE -I/usr/include//:/usr/local/include// \
# 	readline.h
# mf_cflags LD_READLINE -L/usr/local/lib -lreadline -liberty
# \end
#
# $SeeAlso
# \mref{cc(1)},
# \mref{shmkmf(1)}, 
# \mref{config.smh(7)}.
# \mref{cc.smh(7)}.
